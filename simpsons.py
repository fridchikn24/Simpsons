# -*- coding: utf-8 -*-
"""Simpsons.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RKP1o4hgWqsG2ssjmUwJHdrDwJ9HmFxT
"""

!pip install feature_engine
!pip install -U scikit-learn

import sklearn
import feature_engine

# Commented out IPython magic to ensure Python compatibility.
# For DataFrames and manipulations
import pandas as pd
import numpy as np
import scipy.stats as stats

# For data Visualization
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.offline as po
import plotly.graph_objects as go

# %matplotlib inline
import plotly.io as pio
pio.renderers.default = 'colab'

# For splitting the dataset
from sklearn.model_selection import train_test_split

# drop arbitrary features
from sklearn.datasets import fetch_openml

# For categorical variables
from feature_engine.encoding import OneHotEncoder
from feature_engine.encoding import RareLabelEncoder
from feature_engine.encoding import DecisionTreeEncoder
from feature_engine.encoding import MeanEncoder

# For scaling the data
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

from feature_engine.transformation import YeoJohnsonTransformer
from feature_engine.transformation import LogTransformer

# DIscretization
from sklearn.preprocessing import KBinsDiscretizer

# Handling Outliers
from feature_engine.outliers import Winsorizer

# feature engine wrapper 
from feature_engine.wrappers import SklearnTransformerWrapper

# Using KNN classification for our data
from sklearn.neighbors import KNeighborsClassifier

# creating pipelines 
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer

# Hyper parameter tuning
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import StratifiedKFold

# learning Curves
from sklearn.model_selection import learning_curve

# draws a confusion matrix
from sklearn.metrics import plot_confusion_matrix 
from scipy.stats import uniform, truncnorm, randint, loguniform


# save and load models
import joblib

# Pathlib to navigate file system
from pathlib import Path

from sklearn.neighbors import KNeighborsRegressor


from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
#import os
#os.makedirs("/content/drive/MyDrive/teaching_fall_2021/ml_fall_2021/HW_Assignments/HW6/saved_models")
#!ls

from google.colab import drive
drive.mount('/content/drive/')

save_model_folder = Path("/content/drive/MyDrive/Simpsons/saved_models")
data_folder = Path("/content/drive/MyDrive/Simpsons")

simpsons = data_folder /'simpsons_episodes.csv'
with open(simpsons, encoding="utf8",errors='ignore') as csv_file:
    df = pd.read_csv(csv_file)
df.head()

v = df.isna().sum()
v

golden_age = pd.DataFrame(df['season']<10,dtype='category').replace({True: 1, False: 0})
golden_age

simpsons_vars = df.drop(['original_air_date','id','title','production_code','season','number_in_series','views'],axis=1)
simpsons_vars

from feature_engine.imputation import MeanMedianImputer
imputer = MeanMedianImputer(imputation_method='median', variables= ['us_viewers_in_millions','imdb_rating'])
imputer.fit(simpsons_vars)
simpsons_vars=imputer.transform(simpsons_vars)
x_train, x_test, y_train, y_test = train_test_split(simpsons_vars, golden_age, test_size=0.33, random_state=123,stratify = golden_age)

v = simpsons_vars.isna().sum()
v

SpringField_pipeline = Pipeline([
            #('imputer', MeanMedianImputer(imputation_method='median', variables= 'imdb_rating')),
            #('scalar', SklearnTransformerWrapper(StandardScaler())),
            ('knn_class',KNeighborsClassifier())       
])

param_grid_1 = {
    'knn_class__n_neighbors': range(2,20,2),
    'knn_class__weights': ['uniform', 'distance'],
    'knn_class__p': [1, 2],
    'knn_class__n_jobs':[-1]
}

grid_knn_1 = GridSearchCV(SpringField_pipeline,param_grid_1,cv=5,return_train_score=True)
grid_knn_1.fit(x_train,y_train)

grid_knn_1.best_params_

def plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,
                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):
    """
    Generate 2 plots: the test and training learning curve, the training
    samples vs fit times curve.

    Parameters
    ----------
    estimator : estimator instance
        An estimator instance implementing `fit` and `predict` methods which
        will be cloned for each validation.

    title : str
        Title for the chart.

    X : array-like of shape (n_samples, n_features)
        Training vector, where ``n_samples`` is the number of samples and
        ``n_features`` is the number of features.

    y : array-like of shape (n_samples) or (n_samples, n_features)
        Target relative to ``X`` for classification or regression;
        None for unsupervised learning.

    axes : array-like of shape (3,), default=None
        Axes to use for plotting the curves.

    ylim : tuple of shape (2,), default=None
        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).

    cv : int, cross-validation generator or an iterable, default=None
        Determines the cross-validation splitting strategy.
        Possible inputs for cv are:

          - None, to use the default 5-fold cross-validation,
          - integer, to specify the number of folds.
          - :term:`CV splitter`,
          - An iterable yielding (train, test) splits as arrays of indices.

        For integer/None inputs, if ``y`` is binary or multiclass,
        :class:`StratifiedKFold` used. If the estimator is not a classifier
        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.

        Refer :ref:`User Guide <cross_validation>` for the various
        cross-validators that can be used here.

    n_jobs : int or None, default=None
        Number of jobs to run in parallel.
        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
        for more details.

    train_sizes : array-like of shape (n_ticks,)
        Relative or absolute numbers of training examples that will be used to
        generate the learning curve. If the ``dtype`` is float, it is regarded
        as a fraction of the maximum size of the training set (that is
        determined by the selected validation method), i.e. it has to be within
        (0, 1]. Otherwise it is interpreted as absolute sizes of the training
        sets. Note that for classification the number of samples usually have
        to be big enough to contain at least one sample from each class.
        (default: np.linspace(0.1, 1.0, 5))
    """
    if axes is None:
        _, axes = plt.subplots(1, 2, figsize=(10, 5))

    axes[0].set_title(title)
    if ylim is not None:
        axes[0].set_ylim(*ylim)
    axes[0].set_xlabel("Training examples")
    axes[0].set_ylabel("Score")

    train_sizes, train_scores, test_scores, fit_times, _ = \
        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,
                       train_sizes=train_sizes,
                       return_times=True,
                       random_state=123)
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    fit_times_mean = np.mean(fit_times, axis=1)
    fit_times_std = np.std(fit_times, axis=1)

    # Plot learning curve
    axes[0].grid()
    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,
                         train_scores_mean + train_scores_std, alpha=0.1,
                         color="r")
    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,
                         test_scores_mean + test_scores_std, alpha=0.1,
                         color="g")
    axes[0].plot(train_sizes, train_scores_mean, 'o-', color="r",
                 label="Training score")
    axes[0].plot(train_sizes, test_scores_mean, 'o-', color="g",
                 label="Cross-validation score")
    axes[0].legend(loc="best")

    # Plot n_samples vs fit_times
    axes[1].grid()
    axes[1].plot(train_sizes, fit_times_mean, 'o-')
    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,
                         fit_times_mean + fit_times_std, alpha=0.1)
    axes[1].set_xlabel("Training examples")
    axes[1].set_ylabel("fit_times")
    axes[1].set_title("Scalability of the model")

    return plt

file_best_estimator_round1 = save_model_folder / 'knn_round1_best_estimator.pkl'
file_complete_grid_round1 = save_model_folder / 'knn_round1_complete_grid.pkl'

joblib.dump(grid_knn_1.best_estimator_, file_best_estimator_round1)
joblib.dump(grid_knn_1, file_complete_grid_round1)

loaded_best_estimator_round1 = joblib.load(file_best_estimator_round1)
loaded_complete_grid_round1 = joblib.load(file_complete_grid_round1)

plot_learning_curve(loaded_best_estimator_round1, 'Learning Curves KNN', x_train, y_train, n_jobs=-1)

#let's check the train scores
print(loaded_best_estimator_round1.score(x_train,y_train))

#let's check the cross validation score
print(loaded_complete_grid_round1.best_score_)

#Making f2 scorer for Grid search CV
from sklearn.metrics import fbeta_score, make_scorer
ftwo_scorer = make_scorer(fbeta_score, beta=2)
ftwo_scorer

"""Decision Tree"""

from scipy.stats import uniform, truncnorm, randint, loguniform

dtree = DecisionTreeClassifier()

dtree_param = {"max_depth": range(1,10),
           "min_samples_split": range(2,10,1),
           "max_leaf_nodes": range(2,6),
              "splitter": ["best", "random"]}
grid_dtree = GridSearchCV(dtree, dtree_param,cv=5, return_train_score=True, scoring=ftwo_scorer)
grid_dtree.fit(x_train,y_train)

grid_dtree.best_params_

file_best_estimator_round2 = save_model_folder / 'dtree_best_estimator.pkl'
file_complete_grid_round2 = save_model_folder / 'dtree1_complete_grid.pkl'

joblib.dump(grid_dtree.best_estimator_, file_best_estimator_round2)
joblib.dump(grid_dtree, file_complete_grid_round2)

loaded_best_estimator_round2 = joblib.load(file_best_estimator_round2)
loaded_complete_grid_round2 = joblib.load(file_complete_grid_round2)

plot_learning_curve(loaded_best_estimator_round2, 'Learning Curves Dtree', x_train, y_train, n_jobs=-1)

#let's check the train scores
print(loaded_best_estimator_round2.score(x_train,y_train))

#let's check the cross validation score
print(loaded_complete_grid_round2.best_score_)

from sklearn.ensemble import BaggingClassifier

bag_clf = BaggingClassifier(
    DecisionTreeClassifier(random_state=123), n_estimators=500,
    max_samples=100, bootstrap=True, random_state=123,oob_score=True)
bag_clf.fit(x_train, y_train)
y_pred = bag_clf.predict(x_test)

bag_clf.oob_score_

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred))

grid_dtree.best_estimator_

from sklearn.tree import plot_tree
plot_tree(loaded_best_estimator_round2.fit(simpsons_vars, golden_age))

tree_clf_param = grid_dtree.best_estimator_
#tree_clf = DecisionTreeClassifier(tree_clf_param)


